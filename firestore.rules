
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Checks if a user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the requesting user's ID matches the provided userId.
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Checks if the user is a member of a given team.
    function isTeamMember(teamId) {
        return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid] != null;
    }
    
    // Checks if the user has a specific role in a team.
    function hasTeamRole(teamId, role) {
        return isTeamMember(teamId) && get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid].role == role;
    }

    // --- User-Specific Collections ---

    // The /users collection stores public-facing user info and team association.
    match /users/{userId} {
      // Users can only read their own document.
      allow read: if isUser(userId);
      // Users can create their own document on signup.
      allow create: if isUser(userId);
      // Users can only update their own document (e.g., teamId after invite).
      allow update: if isUser(userId);
      // Users should not be able to delete their user record directly.
      allow delete: if false;
    }

    // User-specific settings.
    match /userSettings/{userId} {
      // Only the user can read and write their own settings.
      allow read, write: if isUser(userId);
    }
    
    // User's private prompt history.
    match /promptHistory/{userId}/{promptId} {
        // Only the user can read, create, update, and delete their own prompt history.
        allow read, write: if isUser(userId);
    }

    // --- Public & Shared Collections ---

    // Announcements are public to all authenticated users.
    match /appAnnouncements/{announcementId} {
      allow read: if isSignedIn();
      // Writes should be handled by an admin backend, so deny client writes.
      allow write: if false;
    }

    // --- Team Collaboration Collections ---

    // Rules for the teams collection itself.
    match /teams/{teamId} {
      // Any team member can read the team document.
      allow read: if isTeamMember(teamId);
      // Only admins can update the team document (e.g., change the name, manage members).
      allow update: if hasTeamRole(teamId, 'admin');
      // Team creation is handled by the backend/user flow. Team deletion should be a backend process.
      allow create, delete: if false;
    }
    
    // Rules for shared prompts within a team.
    match /teams/{teamId}/sharedPrompts/{promptId} {
      // Any team member can view shared prompts.
      allow read: if isTeamMember(teamId);
      // Only admins and editors can create, update, or delete shared prompts.
      allow write: if hasTeamRole(teamId, 'admin') || hasTeamRole(teamId, 'editor');
    }
    
    // Rules for chat messages within a team.
    match /teams/{teamId}/chatMessages/{messageId} {
      // Any team member can read chat messages.
      allow read: if isTeamMember(teamId);
      // Any team member can create a new message.
      allow create: if isTeamMember(teamId);
      // Nobody can edit or delete messages from the client-side.
      allow update, delete: if false;
    }

    // --- Sensitive/Backend-Managed Collections ---

    // Transactions should only be created by the backend (Cloud Functions).
    // Users can read their own transactions for auditing.
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      // Deny all client-side writes to prevent tampering.
      allow write: if false; 
    }

    // Subscriptions should only be created/updated by the backend (Cloud Functions).
    // Users can read their own subscription status.
    match /userSubscriptions/{userId} {
      allow read: if isUser(userId);
      // Deny all client-side writes to prevent tampering.
      allow write: if false;
    }
  }
}
