rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read and update their own user document
    match /users/{userId} {
      allow read, update: if isSignedIn() && isOwner(userId);
    }
    
    // Users can create and read their own chat sessions, and only update/delete their own.
    match /chatSessions/{chatId} {
      allow read, delete, update: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }

    // Transactions can only be read by the user who created them. Creation should be handled by secure backend functions.
    match /transactions/{transactionId} {
        allow read: if isSignedIn() && isOwner(resource.data.userId);
        allow create, update, delete: if false; // Disallow client-side modification
    }
    
    // feedback can be created by any signed-in user.
    match /feedback/{feedbackId} {
        allow create: if isSignedIn();
        allow read, update, delete: if false;
    }

    // generations can only be created by signed-in users (via server-side logic). Read access is granted via project document lookup.
    match /generations/{generationId} {
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        allow read, update, delete: if false;
    }

    // projects can be created and read by their owners.
    match /projects/{projectId} {
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        allow read, delete: if isSignedIn() && isOwner(resource.data.userId);
        allow update: if false; // Updates should happen via specific actions if needed
    }
    
  }
}
