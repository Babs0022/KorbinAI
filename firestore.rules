
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions to improve readability
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function userHasRoleInTeam(teamId, roles) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid].role in roles;
    }
    
    function isTeamOwner(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
    }
    
    // --- User Data Collections ---
    
    // users/{userId}: Publicly readable basic info, but only the user can create/update.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isUser(userId);
      // No delete for user documents to prevent orphaned data.
      allow delete: if false;
    }
    
    // promptHistory: Strictly private to the user.
    match /users/{userId}/promptHistory/{promptId} {
      allow read, write, delete: if isUser(userId);
    }
    
    // userSettings: Strictly private to the user.
    match /userSettings/{userId} {
        allow read, write: if isUser(userId);
        allow delete: if false;
    }
    
    // --- Subscription & Payment Data ---

    // userSubscriptions: Only the user can read their own subscription.
    // Written by a trusted server process (Cloud Function).
    match /userSubscriptions/{userId} {
      allow read: if isUser(userId);
      allow write: if false; // Only backend can write
    }
    
    // transactions: Only the user can read their own transactions.
    // Written by a trusted server process (Cloud Function).
    match /transactions/{transactionId} {
      allow read: if isUser(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId);
      allow write: if false; // Only backend can write
    }
    
    // --- Team Collaboration ---

    // teams/{teamId}: Members can read team info. Only owner/admin can update.
    match /teams/{teamId} {
      allow create: if isSignedIn(); // Any signed-in user can create a team.
      allow read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members;
      allow update: if isSignedIn() && userHasRoleInTeam(teamId, ['admin']);
      allow delete: if isSignedIn() && isTeamOwner(teamId);
    }

    // sharedPrompts: Members can read. Admins/Editors can write/delete.
    match /teams/{teamId}/sharedPrompts/{promptId} {
      allow read: if isSignedIn() && userHasRoleInTeam(teamId, ['admin', 'editor', 'viewer']);
      allow create, update, delete: if isSignedIn() && userHasRoleInTeam(teamId, ['admin', 'editor']);
    }

    // chatMessages: Members can read and create. Only sender can delete their own message.
    match /teams/{teamId}/chatMessages/{messageId} {
      allow read, create: if isSignedIn() && userHasRoleInTeam(teamId, ['admin', 'editor', 'viewer']);
      allow update: if false;
      allow delete: if isSignedIn() && resource.data.senderId == request.auth.uid;
    }
    
    // --- Public & Semi-Public Data ---

    // appAnnouncements: Any signed-in user can read. Only backend/admin role can write.
    match /appAnnouncements/{announcementId} {
      allow read: if isSignedIn();
      allow write: if false; // Managed via Firebase Console or a backend function
    }

    // newsletterSubscribers: No client-side access.
    // This should only be written to by a secure backend function.
    match /newsletterSubscribers/{email} {
        allow read, write: if false;
    }
  }
}
