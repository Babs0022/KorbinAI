
rules_version = '2';

// By default, deny all reads and writes.
// Access must be explicitly granted.
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules more readable
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }
    
    function userTeamId() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId;
    }

    function userRoleInTeam(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid].role;
    }

    //----------------------------------------------------------------------
    //  Publicly readable data
    //----------------------------------------------------------------------
    match /appAnnouncements/{announcementId} {
        allow read: if isSignedIn();
        allow write: if false; // Only updatable via Firebase Console / Admin SDK
    }
    
    //----------------------------------------------------------------------
    //  User-specific data (private to each user)
    //----------------------------------------------------------------------
    match /users/{userId} {
      // Users can only read/update their own document.
      allow read, update: if isUser(userId);
      // Deny creation/deletion of user documents via client.
      // Creation happens on signup (server-side). Deletion happens on account delete (server-side).
      allow create, delete: if false; 
    }
    
    match /userSettings/{userId} {
      // Users can only read/write their own settings document.
      allow read, write: if isUser(userId);
    }

    match /userSubscriptions/{userId} {
      // Users can only read their own subscription status.
      // Writes are only handled by the backend Cloud Functions.
      allow read: if isUser(userId);
      allow write: if false;
    }
    
    // Transactions are write-only from backend functions, read-only for the user who made them.
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow write: if false; 
    }

    // The user's prompt history is private to them.
    match /users/{userId}/promptHistory/{promptId} {
      allow read, write, delete: if isUser(userId);
    }

    //----------------------------------------------------------------------
    //  Team Collaboration Data
    //----------------------------------------------------------------------
    match /teams/{teamId} {
      // Allow team members to read team data.
      allow read: if isSignedIn() && teamId == userTeamId();
      
      // Only the team owner (admin) can update the team document itself (e.g., name).
      // Member management (adding/removing/changing roles) happens on this document.
      allow update: if isSignedIn() && userRoleInTeam(teamId) == 'admin';
      
      // Teams are created via backend logic, not directly by clients.
      allow create: if false;
      // TODO: Implement a secure team deletion flow if needed. For now, deny.
      allow delete: if false; 
    }

    match /teams/{teamId}/sharedPrompts/{promptId} {
      // Any team member can view shared prompts.
      allow read: if isSignedIn() && teamId == userTeamId();
      
      // Only admins or editors can create, update, or delete shared prompts.
      allow write, delete: if isSignedIn() 
                           && teamId == userTeamId() 
                           && (userRoleInTeam(teamId) == 'admin' || userRoleInTeam(teamId) == 'editor');
    }
    
    match /teams/{teamId}/chatMessages/{messageId} {
      // Any team member can read chat messages.
      allow read: if isSignedIn() && teamId == userTeamId();
      
      // Any team member can create (send) a new chat message.
      allow create: if isSignedIn() && teamId == userTeamId();

      // Nobody can update or delete chat messages from the client.
      allow update, delete: if false;
    }
    
    //----------------------------------------------------------------------
    //  Other Collections (e.g., for newsletter subscribers)
    //----------------------------------------------------------------------
    
    // No client should read the list of subscribers.
    // Writes are allowed for anyone (public signup form), but we can add validation.
    match /newsletterSubscribers/{email} {
      allow read: if false;
      allow write: if true; // Allows public subscription.
    }
  }
}
