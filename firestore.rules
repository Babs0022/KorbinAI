
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function userHasRole(teamId, role) {
      return get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid].role == role;
    }

    function isTeamMember(teamId) {
        return teamId != null && exists(/databases/$(database)/documents/teams/$(teamId)) && request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members;
    }

    // --- User-specific data (subscriptions, settings, prompt history) ---
    match /users/{userId}/{document=**} {
      allow read, write: if isUser(userId);
    }
    match /userSettings/{userId} {
       allow read, write: if isUser(userId);
    }
    match /userSubscriptions/{userId} {
      allow read: if isUser(userId);
      // Writes to subscriptions are handled by backend Cloud Functions
      allow write: if false;
    }

    // --- Newsletter Subscribers ---
    // Anyone can subscribe (write their own email doc), but no one can read the list.
    match /newsletterSubscribers/{email} {
      allow create: if true;
      allow read, update, delete: if false;
    }

    // --- Transactions ---
    // Only backend functions should write here. Users can read their own transactions.
    match /transactions/{transactionId} {
        allow read: if isUser(resource.data.userId);
        allow write: if false;
    }

    // --- Public Announcements ---
    // Anyone who is signed in can read announcements.
    match /appAnnouncements/{announcementId} {
      allow read: if isSignedIn();
      allow write: if false; // Only admins should write, manage via console/backend
    }

    // --- Teams Collection ---
    match /teams/{teamId} {
      // Any team member can read basic team info.
      allow read: if isTeamMember(teamId);
      
      // Creating a new team is handled by backend logic (or a secure callable function).
      allow create: if isSignedIn();
      
      // Only an admin of the team can update team details or manage members.
      allow update: if isTeamMember(teamId) && userHasRole(teamId, 'admin');

      // Only the team owner can delete a team.
      allow delete: if isUser(resource.data.ownerId);

      // --- Sub-collection: Shared Prompts ---
      match /sharedPrompts/{promptId} {
        // Any team member can view shared prompts.
        allow read: if isTeamMember(teamId);
        
        // Admins and Editors can create, update, and delete shared prompts.
        allow write: if isTeamMember(teamId) && (userHasRole(teamId, 'admin') || userHasRole(teamId, 'editor'));
      }

      // --- Sub-collection: Chat Messages ---
      match /chatMessages/{messageId} {
        // Any team member can read chat messages.
        allow read: if isTeamMember(teamId);

        // Any team member can create (send) a chat message.
        // We validate that the sender is the current user.
        allow create: if isTeamMember(teamId) && request.resource.data.senderId == request.auth.uid;
        
        // No one can update or delete chat messages for integrity.
        allow update, delete: if false;
      }
    }
  }
}
