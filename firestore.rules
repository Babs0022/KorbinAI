
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User Profiles
    // - Anyone can create a user document during signup (if request.auth.uid matches the new userId).
    // - Authenticated users can read and update their own profile.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // User Settings
    // - Authenticated users can read, create, and update their own settings.
    match /userSettings/{userId} {
      allow read, create, update: if request.auth != null && request.auth.uid == userId;
    }

    // Prompt History (Existing Rule)
    // - Authenticated users can read, write, and delete their own prompt history.
    match /users/{userId}/promptHistory/{promptId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Referral Codes
    match /referralCodes/{codeDocId} {
      // Allow unauthenticated reads (list/get) for validation during signup by code string.
      // This is okay for beta, but for production, consider a Cloud Function for validation.
      allow list, get: if request.auth == null;

      // Allow authenticated users (code owner) to read their own code details.
      allow get: if request.auth != null && request.auth.uid == resource.data.userId;

      // Allow authenticated users to create their own referral code.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId
                      && request.resource.data.code != null
                      && request.resource.data.isActive == true
                      && (request.resource.data.usesLeft == null || request.resource.data.usesLeft > 0)
                      && request.resource.data.createdAt == request.time;

      // Allow authenticated users (specifically, the new user being created) to update
      // the referral code they used (decrement usesLeft, add their UID to usersReferred).
      // The writeBatch in SignupForm.tsx handles this.
      // For production, this update logic is more secure if handled by a Cloud Function.
      allow update: if request.auth != null
                    // Ensure only specific fields can be updated this way
                    && request.resource.data.keys().hasAll(['usersReferred', 'lastUsedAt'])
                    && (request.resource.data.keys().has('usesLeft') || !resource.data.keys().has('usesLeft')) // allow if usesLeft exists or not
                    && request.resource.data.usersReferred == resource.data.usersReferred.concat([request.auth.uid]) // Only allows adding current user
                    && (request.resource.data.usesLeft == null || request.resource.data.usesLeft == resource.data.usesLeft - 1) // only allow decrement by 1 or if null
                    && request.resource.data.lastUsedAt == request.time;
    }

    // Transactions
    // - Authenticated users can create their own transaction document (status: pending).
    // - Authenticated users can read their own transaction documents.
    // - Cloud Functions (admin SDK) update transaction status (e.g., to success, failed).
    match /transactions/{transactionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId
                     && request.resource.data.status == "pending_paystack_redirect";
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Updates to 'status' and other fields should typically be done by a trusted backend (Cloud Function).
      // For simplicity in beta, we might allow user to update only specific fields if needed, but this is less secure.
      // allow update: if request.auth != null && request.auth.uid == resource.data.userId; // Example: More permissive update
    }

    // User Subscriptions
    // - Authenticated users can read their own subscription document.
    // - Creation/Updates are typically handled by a trusted backend (Cloud Function) after payment success.
    match /userSubscriptions/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      // allow create, update: if false; // Typically no direct client writes
    }
  }
}

    