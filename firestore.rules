rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      allow read: if request.auth.uid != null && request.auth.uid == userId;
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.uid && request.resource.data.uid == userId;
      allow update: if request.auth.uid != null && request.auth.uid == userId;
      allow delete: if request.auth.uid != null && request.auth.uid == userId;

      // Prompt History subcollection
      match /promptHistory/{promptId} {
        allow read, list: if request.auth.uid != null && request.auth.uid == userId;
        allow create: if request.auth.uid != null && request.auth.uid == userId && request.resource.data.userId == userId;
        allow update: if request.auth.uid != null && request.auth.uid == userId && request.resource.data.userId == userId;
        allow delete: if request.auth.uid != null && request.auth.uid == userId;
      }
    }

    // User Settings collection
    match /userSettings/{userId} {
      allow read, write: if request.auth.uid != null && request.auth.uid == userId;
    }

    // Transactions collection (Paystack integration)
    match /transactions/{transactionId} {
      // Allow create by authenticated user if they are the userId in the transaction
      allow create: if request.auth.uid != null && request.resource.data.userId == request.auth.uid;
      // Allow read by the user who owns the transaction
      allow read: if request.auth.uid != null && request.auth.uid == resource.data.userId;
      // Allow update by backend (Firebase Functions) or specific conditions
      // For client-side updates (like status from "pending"), this might be too open or need refinement.
      // For now, only allow if status changes and it's the user. This is likely better done by backend.
      allow update: if request.auth.uid != null && request.auth.uid == resource.data.userId;
      // Deletion typically not allowed for transaction records
      allow delete: if false;
    }

    // User Subscriptions collection
    match /userSubscriptions/{userId} {
      // Allow read by the user who owns the subscription
      allow read: if request.auth.uid != null && request.auth.uid == userId;
      // Subscriptions primarily managed by backend (Paystack webhook handler)
      allow create, update, delete: if false; // Disallow direct client modification
    }

    // Referral Codes collection
    match /referralCodes/{codeDocId} {
      // For signup: unauthenticated user needs to check if a code exists and is active.
      allow get, list: if request.auth == null;

      // For user managing their own code (e.g., viewing on account page, potentially re-generating if allowed by app logic)
      allow read: if request.auth.uid != null && resource.data.userId == request.auth.uid;

      // Authenticated user creating THEIR OWN referral code (e.g., on account page or onboarding)
      allow create: if request.auth.uid != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.code != null &&
                       request.resource.data.isActive == true &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.usesLeft > 0 &&
                       request.resource.data.usersReferred is list &&
                       request.resource.data.usersReferred.size() == 0;

      // This rule allows an authenticated (newly signed up) user to update a specific referral code document
      // by decrementing usesLeft, adding their UID to usersReferred, and setting lastUsedAt.
      // This is a critical rule for the client-side signup flow.
      allow update: if request.auth.uid != null &&
                       // Ensure usesLeft is being decremented or remains 0 if it was already 0
                       (request.resource.data.usesLeft == resource.data.usesLeft - 1 || (resource.data.usesLeft == 0 && request.resource.data.usesLeft == 0)) &&
                       // Ensure the new user's UID is being added to the usersReferred list
                       request.resource.data.usersReferred == list_append(resource.data.usersReferred, request.auth.uid) &&
                       // Ensure lastUsedAt is being set to the current server time
                       request.resource.data.lastUsedAt == request.time &&
                       // Ensure ONLY these specific fields are being modified
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['usesLeft', 'usersReferred', 'lastUsedAt']);
      
      // Generally, users should not delete referral codes directly. This might be an admin action.
      allow delete: if false;
    }
  }
}
