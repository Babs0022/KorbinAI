
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getTeamData(teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId)).data;
    }

    function isTeamMember(teamId) {
      return isAuthenticated() && request.auth.uid in getTeamData(teamId).members;
    }

    function isTeamRole(teamId, role) {
      return isTeamMember(teamId) && getTeamData(teamId).members[request.auth.uid].role == role;
    }

    function isTeamAdmin(teamId) {
      return isTeamRole(teamId, 'admin');
    }

    function isTeamEditorOrAdmin(teamId) {
      return isTeamRole(teamId, 'editor') || isTeamAdmin(teamId);
    }

    // --- Collection Rules ---

    // User-specific data
    match /users/{userId} {
      // A user can create their own document upon signup.
      // A user can update their own document (e.g., for teamId).
      // A user can read their own document.
      allow read, write: if isUser(userId);
      
      // No one can list user documents from the client.
      allow list, delete: if false;

      // Subcollections of users
      match /promptHistory/{promptId} {
        // A user has full control over their own prompt history.
        allow read, write: if isUser(userId);
      }
      match /onboardingInfo/{docId} {
        // A user has full control over their own onboarding info.
        allow read, write: if isUser(userId);
      }
    }

    // User settings
    match /userSettings/{userId} {
      // A user can read and write their own settings.
      allow read, write: if isUser(userId);
    }
    
    // User subscription information (written by backend)
    match /userSubscriptions/{userId} {
      // Only the user can read their own subscription status.
      allow get: if isUser(userId);
      // Writes should only be done from a trusted backend (Firebase Functions).
      allow write: if false;
    }

    // Transaction records (written by backend)
    match /transactions/{transactionId} {
      // Only the user associated with the transaction can read it.
      allow get: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // No listing transactions or writing from the client.
      allow list, write: if false;
    }

    // Public write, but no read access to protect emails
    match /newsletterSubscribers/{email} {
      // Anyone can subscribe.
      allow create;
      // No one can read, update, or delete from the client.
      allow read, update, delete: if false;
    }
    
    // App-wide announcements (read-only for clients)
    match /appAnnouncements/{announcementId} {
      // All authenticated users can read announcements.
      allow get: if isAuthenticated();
      // No client-side writes.
      allow write: if false;
    }

    // Team collaboration
    match /teams/{teamId} {
      // Any authenticated user can create a team (UI should gate this by subscription).
      allow create: if isAuthenticated();
      // Only team members can read the team document.
      allow get: if isTeamMember(teamId);
      // Only team admins can update the team document.
      allow update: if isTeamAdmin(teamId);
      // Only the designated owner of the team can delete it.
      allow delete: if isUser(resource.data.ownerId);
      
      // --- Team Subcollections ---
      match /sharedPrompts/{promptId} {
        // Team members can read and list shared prompts.
        allow get, list: if isTeamMember(teamId);
        // Team editors or admins can create, update, and delete.
        allow write: if isTeamEditorOrAdmin(teamId);
      }
      
      match /chatMessages/{messageId} {
        // Team members can read and list chat messages.
        allow get, list: if isTeamMember(teamId);
        // Team members can create messages, but must be the sender.
        allow create: if isTeamMember(teamId) && request.resource.data.senderId == request.auth.uid;
        // No client-side updates or deletes on chat messages.
        allow update, delete: if false;
      }
    }
  }
}
