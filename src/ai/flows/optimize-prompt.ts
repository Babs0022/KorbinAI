
// src/ai/flows/optimize-prompt.ts
'use server';
/**
 * @fileOverview A prompt optimization AI agent.
 *
 * - optimizePrompt - A function that handles the prompt optimization process.
 * - OptimizePromptInput - The input type for the optimizePrompt function.
 * - OptimizePromptOutput - The return type for the optimizePrompt function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const OptimizePromptInputSchema = z.object({
  goal: z.string().describe('The primary task or objective for the AI.'),
  answers: z.record(z.string()).optional().describe('A key-value map of survey questions to user answers, providing additional context.'),
});
export type OptimizePromptInput = z.infer<typeof OptimizePromptInputSchema>;

const OptimizePromptOutputSchema = z.object({
  optimizedPrompt: z.string().describe('The optimized prompt generated by AI.'),
});
export type OptimizePromptOutput = z.infer<typeof OptimizePromptOutputSchema>;

export async function optimizePrompt(input: OptimizePromptInput): Promise<OptimizePromptOutput> {
  return optimizePromptFlow(input);
}

const prompt = ai.definePrompt({
  name: 'optimizePromptPrompt',
  input: {schema: OptimizePromptInputSchema},
  output: {schema: OptimizePromptOutputSchema},
  prompt: `You are an expert AI Prompt Engineer. Your task is to construct a single, cohesive, and powerful prompt for an AI model by integrating the user's primary "Goal" and their "Survey Answers".

The final output should be ONLY the engineered prompt itself, without any conversational text or explanations.

**1. Primary Goal:**
This is the core instruction.
"{{{goal}}}"

**2. Additional Context from Survey Answers:**
Use these answers to add necessary details, constraints, persona, and formatting instructions.
{{#each answers}}
- For the question "{{@key}}", the user provided: "{{this}}"
{{/each}}

Synthesize the goal and the answers into a complete, optimized prompt. Ensure clarity, specificity, and actionability. If the user's answers imply a certain persona for the AI or a specific output format, incorporate that into the prompt.
`,
});

const optimizePromptFlow = ai.defineFlow(
  {
    name: 'optimizePromptFlow',
    inputSchema: OptimizePromptInputSchema,
    outputSchema: OptimizePromptOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
