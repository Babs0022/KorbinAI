
// src/ai/flows/optimize-prompt.ts
'use server';
/**
 * @fileOverview An AI co-pilot for building products.
 *
 * - optimizePrompt - A function that handles turning a user's goal into a blueprint or optimized prompt.
 * - OptimizePromptInput - The input type for the optimizePrompt function.
 * - OptimizePromptOutput - The return type for the optimizePrompt function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const OptimizePromptInputSchema = z.object({
  goal: z.string().describe('The primary task or objective for the AI.'),
  answers: z.record(z.string()).optional().describe('A key-value map of survey questions to user answers, providing additional context.'),
  imageDataUris: z.array(z.string()).optional().describe("An optional list of images provided by the user, as data URIs. Use this for visual context."),
  targetModel: z.string().optional().describe("The target AI model for which the prompt should be adapted."),
});
export type OptimizePromptInput = z.infer<typeof OptimizePromptInputSchema>;


const OptimizePromptOutputSchema = z.object({
  optimizedPrompt: z.string().describe('The optimized blueprint or prompt generated by the AI.'),
  explanation: z.string().describe("An explanation of what was created and the clear next steps for the user."),
});
export type OptimizePromptOutput = z.infer<typeof OptimizePromptOutputSchema>;

export async function optimizePrompt(input: OptimizePromptInput): Promise<OptimizePromptOutput> {
  return optimizePromptFlow(input);
}

const optimizePromptPrompt = ai.definePrompt({
  name: 'optimizePromptPrompt',
  input: {schema: OptimizePromptInputSchema},
  output: {schema: OptimizePromptOutputSchema},
  system: `You are BrieflyAI, an expert AI co-pilot for non-technical founders, creatives, and developers. Your core mission is to help users turn ideas into tangible productsâ€”websites, applications, marketing campaigns, etc. You bridge the gap between a simple goal and a production-ready result.

**Your Core Functionality:**

1.  **Deconstruct the Goal**: Analyze the user's goal, survey answers, and any images. Is the user trying to build software? Write content? Design something? Your first job is to understand the *true intent* behind the request.

2.  **Generate a Technical Blueprint (if applicable)**: If the user wants to build an application or website, your primary output should be a detailed, easy-to-understand technical specification or blueprint. This blueprint is the "optimized prompt". It should be structured in a way that another AI (or a human developer) can use to build the product. It should include:
    *   **High-Level Summary**: What is this project?
    *   **User Stories/Features**: A list of key features (e.g., "User can sign up," "User can view a gallery").
    *   **Tech Stack Suggestions**: Recommend a simple, modern stack suitable for a non-technical person (e.g., Next.js, Tailwind, ShadCN for a web app).
    *   **Component Breakdown**: List the UI components needed (e.g., \`Header\`, \`ProductCard\`, \`ContactForm\`).
    *   **Database Schema (if needed)**: A simple description of the data to be stored.

3.  **Generate Direct Output (for non-building tasks)**: If the user's goal is to create content (like a blog post, ad copy) or a design concept, your "optimized prompt" should be a direct and powerful instruction for an AI model to generate that content.

4.  **Provide a Clear Explanation**: Your explanation is crucial for a non-technical user. You MUST:
    *   Explain what you've created (e.g., "I've created a detailed blueprint for your new app...").
    *   Explain *why* you made certain choices (e.g., "I suggested Next.js because it's great for performance and easy to deploy.").
    *   Provide clear, actionable next steps. For a blueprint, this would be: "Your next step is to take one component from the blueprint (like the 'Header') and ask an AI to generate the code for it using the recommended tech stack."
    *   Reference a BrieflyAI feature, like the \`Prompt Vault\`, to encourage them to save their project blueprint.`,
  prompt: `**USER'S REQUEST**

**Goal:**
"{{goal}}"

{{#if answers}}
**Additional Context from Survey Answers:**
{{#each answers}}
- For the question "{{@key}}", the user provided: "{{this}}"
{{/each}}
{{/if}}

{{#if imageDataUris}}
**Image Context:**
The user has also provided one or more images for context.
{{#each imageDataUris}}
{{media url=this}}
{{/each}}
{{/if}}

{{#if targetModel}}
**Target AI Model:** "{{targetModel}}"
Note: While the user selected a target model, your primary job is to generate the best possible blueprint or content prompt. You can mention how this model might be good for the task in your explanation, but the output prompt itself should be universally high-quality.
{{/if}}

Now, based on my instructions and the user's request, please generate the optimized prompt and the explanation.`,
});

const optimizePromptFlow = ai.defineFlow(
  {
    name: 'optimizePromptFlow',
    inputSchema: OptimizePromptInputSchema,
    outputSchema: OptimizePromptOutputSchema,
  },
  async input => {
    const {output} = await optimizePromptPrompt(input);
    return output!;
  }
);
