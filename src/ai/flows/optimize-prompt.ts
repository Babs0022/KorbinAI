// src/ai/flows/optimize-prompt.ts
'use server';
/**
 * @fileOverview A prompt optimization AI agent.
 *
 * - optimizePrompt - A function that handles the prompt optimization process.
 * - OptimizePromptInput - The input type for the optimizePrompt function.
 * - OptimizePromptOutput - The return type for the optimizePrompt function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const OptimizePromptInputSchema = z.object({
  goal: z.string().optional().describe('The goal or task the user wants to accomplish with the prompt.'),
  imageUrl: z.string().optional().describe("An image file encoded as a Base64 data URI. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
  websiteUrl: z.string().optional().describe("A URL to a website for context."),
  answers: z.record(z.string()).describe('Answers to adaptive survey questions.'),
  temperature: z.number().min(0).max(1).optional().describe('Controls randomness. Lower is more deterministic. Default is 0.5.'),
  maxTokens: z.number().int().positive().optional().describe('Maximum number of tokens to generate.'),
});
export type OptimizePromptInput = z.infer<typeof OptimizePromptInputSchema>;

const OptimizePromptOutputSchema = z.object({
  optimizedPrompt: z.string().describe('The optimized prompt generated by AI.'),
});
export type OptimizePromptOutput = z.infer<typeof OptimizePromptOutputSchema>;

export async function optimizePrompt(input: OptimizePromptInput): Promise<OptimizePromptOutput> {
  return optimizePromptFlow(input);
}

const prompt = ai.definePrompt({
  name: 'optimizePromptPrompt',
  input: {schema: OptimizePromptInputSchema},
  output: {schema: OptimizePromptOutputSchema},
  prompt: `You are an expert prompt optimizer. Your task is to generate an optimized, detailed, and effective prompt based on the user's provided inputs. The user might provide a text goal, an image, a website URL, or a combination of these, along with answers to clarifying survey questions.

The final prompt should be a clear set of instructions for an AI model.

USER'S INPUTS:
---
{{#if goal}}
Goal:
"{{{goal}}}"
{{/if}}

{{#if imageUrl}}
Image Context:
An image has been provided. Incorporate its content and themes into the final prompt. The prompt should instruct an AI to perform an action related to this image (e.g., describe it, write a story about it, create marketing copy based on it).
{{media url=imageUrl}}
{{/if}}

{{#if websiteUrl}}
Website Context:
Analyze the content from the following website and use it as context: {{{websiteUrl}}}
{{/if}}
---
ANSWERS TO CLARIFYING QUESTIONS:
---
{{#if answers}}
{{#each answers}}
- {{{@key}}}: {{{this}}}
{{/each}}
{{else}}
(No survey answers provided)
{{/if}}
---

Based on ALL the information above, generate the optimized prompt.
If the input is an image, the prompt should be suitable for an image-analysis or image-to-text model.
If the input is a website, the prompt could be for summarizing, analyzing, or creating content based on it.
If the input is text, refine it into a comprehensive prompt.
Combine all inputs logically into a single, cohesive, and powerful prompt.
`,
});

const optimizePromptFlow = ai.defineFlow(
  {
    name: 'optimizePromptFlow',
    inputSchema: OptimizePromptInputSchema,
    outputSchema: OptimizePromptOutputSchema,
  },
  async input => {
    const {output} = await prompt(input, {
        temperature: input.temperature,
        maxOutputTokens: input.maxTokens,
    });
    return output!;
  }
);
