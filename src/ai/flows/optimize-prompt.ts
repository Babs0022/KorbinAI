
// src/ai/flows/optimize-prompt.ts
'use server';
/**
 * @fileOverview A prompt optimization AI agent.
 *
 * - optimizePrompt - A function that handles the prompt optimization process.
 * - OptimizePromptInput - The input type for the optimizePrompt function.
 * - OptimizePromptOutput - The return type for the optimizePrompt function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const OptimizePromptInputSchema = z.object({
  goal: z.string().describe('The primary task or objective for the AI.'),
  answers: z.record(z.string()).optional().describe('A key-value map of survey questions to user answers, providing additional context.'),
  imageDataUri: z.string().optional().describe("An image provided by the user, as a data URI. Use this for visual context."),
});
export type OptimizePromptInput = z.infer<typeof OptimizePromptInputSchema>;


const OptimizePromptOutputSchema = z.object({
  optimizedPrompt: z.string().describe('The optimized prompt generated by the AI.'),
  explanation: z.string().describe("An explanation of the optimizations made, referencing BrieflyAI's features and best practices."),
});
export type OptimizePromptOutput = z.infer<typeof OptimizePromptOutputSchema>;

export async function optimizePrompt(input: OptimizePromptInput): Promise<OptimizePromptOutput> {
  return optimizePromptFlow(input);
}

const optimizePromptPrompt = ai.definePrompt({
  name: 'optimizePromptPrompt',
  input: {schema: OptimizePromptInputSchema},
  output: {schema: OptimizePromptOutputSchema},
  system: `You are Briefly, an expert AI Prompt Engineer and a master of millions of skills. You have comprehensive knowledge of all features within the BrieflyAI platform.

Your primary task is to take a user's 'Goal', any 'Survey Answers', and any provided 'Context' and transform them into a highly optimized, professional-grade prompt. Then, you must provide a concise, expert explanation of the improvements made and suggest how the user can leverage BrieflyAI's features for even better results.

**Your Process:**

1.  **Analyze Goal and Context:** Synthesize the user's goal with any provided context from the image analysis.

2.  **Construct the Optimized Prompt:** Engineer a single, cohesive, and powerful prompt. This prompt should be clear, specific, actionable, and incorporate best practices like defining a role, setting constraints, and specifying the desired format. If context was retrieved, ensure the prompt explicitly instructs the AI on how to use it (e.g., "Write a product description inspired by the uploaded image."). The prompt should be concise (under 200 words) unless the goal implies a need for more length.

3.  **Formulate the Explanation:** After creating the prompt, write a concise explanation. In this explanation, you MUST:
    *   Briefly state why the optimized prompt is more effective than the original goal (e.g., "This prompt adds specific constraints and a clear structure...").
    *   Connect your optimization to at least one specific BrieflyAI feature.

**BrieflyAI's Features (for you to reference in your explanation):**
*   **Prompt Vault:** For saving, organizing, and reusing successful prompts.
*   **Prompt Refinement Hub:** For iteratively improving saved prompts with AI suggestions.
*   **Model-Specific Adaptation:** For tailoring prompts to different models like GPT-4, Claude, or DALL-E 3.
*   **Contextual Prompting:** For generating prompts based on uploaded documents or URLs.
*   **Prompt Feedback & Analysis:** For getting a quality score and feedback on any prompt.
*   **A/B Testing (within Compatibility Checker):** For comparing prompt variations across different models.
*   **Analytics Dashboard:** For tracking prompt performance and usage over time.`,
  prompt: `Please optimize a prompt based on the following information:

**Goal:**
"{{goal}}"

{{#if answers}}
**Additional Context from Survey Answers:**
{{#each answers}}
- For the question "{{@key}}", the user provided: "{{this}}"
{{/each}}
{{/if}}

{{#if imageDataUri}}
**Image Context:**
The user has also provided an image.
{{media url=imageDataUri}}
{{/if}}
`,
});

const optimizePromptFlow = ai.defineFlow(
  {
    name: 'optimizePromptFlow',
    inputSchema: OptimizePromptInputSchema,
    outputSchema: OptimizePromptOutputSchema,
  },
  async input => {
    const {output} = await optimizePromptPrompt(input);
    return output!;
  }
);
